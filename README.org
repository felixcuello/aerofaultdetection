* Aero Fault Detection

* Introduction
AeroFaultDetection is an AI/ML project that will try to determine if it is possible to detect problems in weather sensors used in wind turbines fields.

The information comes in the form of time series where we have samples of a given data every 10 minutes and we have to detect if the sensors are having troubles gettinf the information by analyzing the data in them.

Time series and anomaly detection is a very interesting topic in Machine Learning, and this project tries to build an application to detect problems in these weather stations.

* Setup

** Containers
Everything is set up inside the ```Makefile```. So you have to look inside that file for the options.

First copy the ```.env.sample``` into the ```.env``` and adjust all the environment variables (*DO NOT LEAVE THE DEFAULTS*).

*** Database

The most common options are:

- ```make db_up``` : To start the database

- ```make db_create``` : To create the database tables (after the container was started)

- ```make db_delete``` : To delete the database tables (after the container was created)

- ```make psql``` : To access a psql command inside the DB container

*** Application

- ```make testshell``` : To get a bash shell inside the application container

**** Logging Levels

- *DEBUG*: Non mandatory, non relevant logs, that are only useful for developers.

- *INFO*: Relevant logs that can be useful for tracing problems.

- *WARNING*: Errors that can be recovered.

- *ERROR*: Errors that cannot be recovered and could cause potential loss of information.

- *CRITICAL*: Errors that cannot be recovered and cause a loss of information or lead to a program end.

* Data analysis

- T: Temperatura del datalogger
- A: Sensores anal贸gicos
  - KPC
  - Bar贸metro
  - Anem贸metro vertical (si lo tuviera)
    - Veleta
- C: COMMs
  - Anem贸metro
- D: Sensores Digitales
  - Veleta
- Count: Cantidad de medificiones


* Machine Learning
** Introduction
Working in machine learning usually requires several iterations, tests, trial, errors and refinements.

Even though we use ```git``` that could be used to version scripts, we would like to have some sort of iteration on the things we have tested to show different results in the future and to be able to compare different versions we used over time (and/or if we tested different models).

Below you'll find the

** Helper Libraries
Since we are going to repeat several things in our scripts, we'll create some helper libraries to group the functionalities.

** Attempts
*** Attempt \#1: Isolation Forest
